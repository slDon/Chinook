@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.ClientModels
@using Chinook.Services.Interfaces;
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;
@using System.Transactions;

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Artist == null)
{
    <Loading />
}
else
{
    <h1>@Artist.Name</h1>
        <table class="table table-striped table-hover table-sm">
            <thead>
                <tr>
                    <th>Album title</th>
                    <th>Track name</th>
                    <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var track in Tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-filled"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
            </tbody>
        </table>

}

@code {
    [Parameter] public long ArtistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    [Inject] IArtistService artistService { get; set; }
    [Inject] ITrackService trackService  { get; set; }
    [Inject] IPlayListService playListService { get; set; }
    [Inject] IBroadcastService broadcastService { get; set; }
    private Modal PlaylistDialog { get; set; }

    private Artist? Artist;
    private List<ClientModels.PlaylistTrack> Tracks;
    private IList<ClientModels.Playlist> playlists;
    private ClientModels.PlaylistTrack SelectedTrack;
    private string InfoMessage;
    private string CurrentUserId;
    private string selectedPlaylistName = "";
    private string selectedPlaylistId = "0";
    private bool disableNewPlaylistNameBox = false;

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        CurrentUserId = await GetUserId();

        playlists = await playListService.GetPlayListsByUserIdAsync(CurrentUserId);

        Artist = await artistService.GetArtistByArtisIdAsync(ArtistId);

        Tracks = trackService.GetTracksByArtistIdAndUserId(ArtistId, CurrentUserId).ToList();
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private async void FavoriteTrack(long trackId)
    {
        var existFavoriteList = await playListService.GetPlayListByNameAsync(CurrentUserId, "My favorite tracks");
        if (existFavoriteList == null)
        {
            existFavoriteList = await playListService.CreatePlayListAsync(CurrentUserId, "My favorite tracks");
        }

        var track = await trackService.AddTrackToPlayListAsync(existFavoriteList.PlaylistId, trackId);
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";
        StateHasChanged();
    }

    private void UnfavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";
    }

    private void OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();
        SelectedTrack = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        PlaylistDialog.Open();
    }

    private void AddTrackToPlaylist()
    {
        CloseInfoMessage();

        long playlistId = 0;
        if (long.TryParse(selectedPlaylistId, out playlistId))
        {
            if(playlistId == 0 && !string.IsNullOrEmpty(selectedPlaylistName))
            {
                playlistId = playListService.CreatePlayListAsync(CurrentUserId, selectedPlaylistName).Result.PlaylistId;
                selectedPlaylistName = "";
                broadcastService.TriggerNavRefresh();
            }

            trackService.AddTrackToPlayListAsync(playlistId, SelectedTrack.TrackId).Wait();
        }


        InfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to playlist {{playlist name}}.";
        PlaylistDialog.Close();
        StateHasChanged();
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }

    private void OnPlaylistSelect(ChangeEventArgs e)
    {
        selectedPlaylistId = e.Value.ToString();
        long playlistId = 0;
        long.TryParse(selectedPlaylistId, out playlistId);
        if(playlistId > 0)
        {
            disableNewPlaylistNameBox = true;
        }
        else
        {
            disableNewPlaylistNameBox = false;
        }
        StateHasChanged();
    }

}

<Modal @ref="PlaylistDialog">
    <Title>
        Add to playlist
    </Title>
    <Body>
        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@Artist.Name - @SelectedTrack.AlbumTitle - @SelectedTrack.TrackName</label>
            </div>
        }

        <div class="form-group mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <select class="form-control" id="ExistingPlaylist" @onchange="OnPlaylistSelect">
                <option value="0">None</option>
                @{
                    foreach (var item in playlists)
                    {
                        <option value="@item.PlaylistId">@item.Name</option>
                    }
                }
            </select>
        </div>
        <div class="form-group mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" @bind-value="@selectedPlaylistName" disabled="@disableNewPlaylistNameBox" class="form-control" placeholder="Name for the new playlist">
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>
