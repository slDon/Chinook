@page "/playlist/{PlaylistId:long}"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.Services.Interfaces;
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;

<h1>Playlist <strong>@Playlist.Name</strong></h1>

<div><button type="button" class="btn btn-primary" aria-label="Rename Playlist" @onclick="PlaylistRename">Rename Playlist</button></div>

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Playlist == null)
{
     <Loading />
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Track</th>
                <th></th>
        </tr>
        </thead>
        <tbody>
            @foreach (var track in Playlist.Tracks)
            {
                <tr>
                    <td>@track.ArtistName - @track.AlbumTitle - @track.TrackName</td>
                    <td>
                        <div class="d-flex">
                            @if (Playlist.Name != "My favorite tracks")
                            {
                                @if (track.IsFavorite)
                                {
                                    <a href="#" class="m-1" title="Unark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                                }
                                else
                                {
                                    <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                                }

                            }
                            <a href="#" class="m-1" title="Remove from this playlist" @onclick="@(() => RemoveTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-trash"></i></a>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}



@code {
    [Parameter] public long PlaylistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    [Inject] IPlayListService playListService { get; set; }
    [Inject] ITrackService trackService { get; set; }
    private Modal PlaylistRenameDialog { get; set; }

    private Chinook.ClientModels.Playlist Playlist;
    private string CurrentUserId;
    private string InfoMessage;
    private string newPlaylistName = "";

    protected override async Task OnInitializedAsync()
    {
        CurrentUserId = await GetUserId();

        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnParametersSetAsync()
    {
        Playlist = await playListService.GetPlayListByUserIdAndPlayListIdAsync(CurrentUserId, PlaylistId);
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private async void FavoriteTrack(long trackId)
    {
        var existFavoriteList = await playListService.GetPlayListByNameAsync(CurrentUserId, "My favorite tracks");
        if (existFavoriteList == null)
        {
            existFavoriteList = await playListService.CreatePlayListAsync(CurrentUserId, "My favorite tracks");
        }

        var track = await trackService.AddTrackToPlayListAsync(existFavoriteList.PlaylistId, trackId);
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";
        StateHasChanged();
    }

    private void UnfavoriteTrack(long trackId)
    {
        var track = Playlist.Tracks.FirstOrDefault(t => t.TrackId == trackId);
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";
    }

    private void RemoveTrack(long trackId)
    {
        CloseInfoMessage();

    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }

    private void PlaylistRename()
    {
        PlaylistRenameDialog.Open();
    }

    private async void ChangePlaylistName()
    {
        CloseInfoMessage();
        var newPlaylist = await playListService.RenamePlayListByIdAsync(PlaylistId, newPlaylistName);
        Playlist.Name = newPlaylist.Name;
        PlaylistRenameDialog.Close();
        StateHasChanged();
    }

}


    <Modal @ref="PlaylistRenameDialog">
    <Title>
        Rename playlist
    </Title>
    <Body>
        <div class="form-group mb-2">
            <label for="ExistingPlaylist">Current Playlist Name</label>
            <label for="ExistingPlaylist">@Playlist.Name</label>
        </div>
        <div class="form-group mb-2">
            <label for="NewPlaylist">New playlist Name</label>
            <input type="text" id="NewPlaylistName" @bind-value="@newPlaylistName" class="form-control" placeholder="Name for the playlist">
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="ChangePlaylistName">Save</button>
    </Footer>
</Modal>